use crate::front::span::{Pos, Span};
use crate::ir::instructions::{BinaryOp, UnaryOp};
use std::default::Default;

/// Tokens that will be generated by the lexer.
pub struct Token {
  pub span: Span,
  pub kind: TokenKind,
}

impl Token {
  /// Creates a new token.
  pub fn new(span: Span, kind: TokenKind) -> Self {
    Self { span, kind }
  }
}

impl Default for Token {
  fn default() -> Self {
    Self {
      span: Span::new(Pos::new()),
      kind: TokenKind::End,
    }
  }
}

/// Kind of token.
#[derive(Debug, PartialEq)]
pub enum TokenKind {
  Int(i64),
  Symbol(String),
  Keyword(Keyword),
  BinaryOp(BinaryOp),
  UnaryOp(UnaryOp),
  Other(char),
  End,
}

/// Keywords of Koopa IR.
#[rustfmt::skip]
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum Keyword {
  I32,
  Undef, Zeroinit,
  Global, Alloc, Load, Store, Getptr,
  Br, Jump, Call, Ret, Fun, Decl, Phi,
}
